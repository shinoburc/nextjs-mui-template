// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
//}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  // next-auth のドキュメントでは email をオプショナルにしているが、必須に変更している
  // name か email どちらかがセットされていれば良い仕様の場合は元に戻す
  // reference: https://next-auth.js.org/adapters/prisma
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  password   String
  roleId    String
  role    Role     @relation(fields: [roleId], references: [id])
  fromThanksCards ThanksCard[] @relation("FromThanksCards")
  toThanksCards ThanksCard[] @relation("ToThanksCards")
  departmentId String
  department Department     @relation(fields: [departmentId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Role {
  id            String    @id @default(cuid())
  name      String    @unique
  users User[]
}

model ThanksCard {
  id            String    @id @default(cuid())
  title      String
  body      String
  from    User     @relation("FromThanksCards", fields: [fromId], references: [id])
  fromId  String
  to    User     @relation("ToThanksCards", fields: [toId], references: [id])
  toId  String
  createdAt DateTime @default(now())
}

model Department {
  id            String    @id @default(cuid())
  code      Int   @unique
  name      String
  parentId  String?
  parent    Department?     @relation("Parent Children", fields: [parentId], references: [id])
  children Department[]     @relation("Parent Children")
  users User[]
}